###########################
Run "Model_result_tocsv.py" first.
This code optimize prediction thresholds of the results of models and compute skill scores for the optimized prediction threshold.
###########################

import os, sys
import glob
import numpy as np
import pandas as pd
from tqdm import tqdm, trange


criteria = np.arange(99) * 0.01 + 0.01

work_folders = ['Uncertainity_DDQN_ep1_others']

for folder in tqdm(work_folders):
    Model_names = os.listdir(f'C:\\Users\\YKW\\PycharmProjects\\Reinforcement\\Models\\{folder}')

    for Model_name in tqdm(Model_names):

        best_record = []
        best_record = None
        best_ACC, best_TSS, best_HSS_1, best_HSS_2, best_CSI, best_F1, best_GS, best_WACC, best_ApSS, best_record = \
            None, None, None, None, None, None, None, None, None, None
        result_paths = glob.glob(f'C:\\Users\\YKW\\PycharmProjects\\Reinforcement\\Models\\{folder}\\{Model_name}\\*\\*.csv')

        record = []
        for result_path in tqdm(result_paths):
            name = os.path.basename(result_path[:-15])
            result = pd.read_csv(result_path)

            for cri in criteria:
                TP, FP, FN, TN = None, None, None, None
                ACC, TSS, HSS_1, HSS_2, CSI, F1, GS, ApSS, WACC, event_rate, score_record = \
                    None, None, None, None, None, None, None, None, None, None, None

                TP = result.loc[result['label'] == 1]
                TP = len(TP.loc[TP['flare'] >= cri])
                FP = result.loc[result['label'] == 0]
                FP = len(FP.loc[result['flare'] >= cri])
                FN = len(result.loc[result['label'] == 1]) - TP
                TN = len(result.loc[result['label'] == 0]) - FP

                ########## Observation #
                ##########  P  ||  N  ##
                # Fo | P |  TP ||  FP ||
                # re |||||==============
                # ca | N |  FN ||  TN ||
                # st |||||==============

                ACC = (TP + TN) / (TP + FP + FN + TN)
                TSS = TP / (TP + FN) - FP / (FP + TN)
                HSS_1 = (TP - FP) / (TP + FN)
                HSS_2 = 2*((TP*TN)-(FN*FP))/(((TP+FN)*(FN+TN))+((TP+FP)*(FP+TN)))
                CSI = TP/(TP+FP+FN)
                F1 = TP / (TP + 0.5 * (FP + FN))
                CH = (TP + FP) * (TP + FN) / (TP + FP + FN + TN)
                GS = (TP - CH) / (TP + FP + FN - CH)
                event_rate = (TP + FN) / (TP + FP + FN + TN)
                if event_rate < 0.5:
                    ApSS = (TP - FP) / (TP + FN)
                else:
                    ApSS = (TN - FN) / (FP + TN)
                WACC = (8*TP + TN) / (8*TP + 4*FP + 16*FN + TN)

                labels = ['name', 'cri', 'ACC', 'TSS', 'HSS_1', 'HSS_2', 'CSI', 'F1', 'GS', 'ApSS', 'WACC', 'TP', 'FP', 'FN', 'TN']
                score_record = (name, cri, ACC, TSS, HSS_1, HSS_2, CSI, F1, GS, ApSS, WACC, TP, FP, FN, TN)
                record.append(score_record)

        record = pd.DataFrame.from_records(record, columns=labels)
        best_ACC = record.loc[record['ACC'] == max(record['ACC'])].copy()
        best_ACC['Description'] = 'best_ACC'
        best_TSS = record.loc[record['TSS'] == max(record['TSS'])].copy()
        best_TSS['Description'] = 'best_TSS'
        best_HSS_1 = record.loc[record['HSS_1'] == max(record['HSS_1'])].copy()
        best_HSS_1['Description'] = 'best_HSS_1'
        best_HSS_2 = record.loc[record['HSS_2'] == max(record['HSS_2'])].copy()
        best_HSS_2['Description'] = 'best_HSS_2'
        best_CSI = record.loc[record['CSI'] == max(record['CSI'])].copy()
        best_CSI['Description'] = 'best_CSI'
        best_F1 = record.loc[record['F1'] == max(record['F1'])].copy()
        best_F1['Description'] = 'best_F1'
        best_GS = record.loc[record['GS'] == max(record['GS'])].copy()
        best_GS['Description'] = 'best_GS'
        best_ApSS = record.loc[record['ApSS'] == max(record['ApSS'])].copy()
        best_ApSS['Description'] = 'best_ApSS'
        best_WACC = record.loc[record['WACC'] == max(record['WACC'])].copy()
        best_WACC['Description'] = 'best_WACC'

        best_record = pd.concat([best_ACC, best_TSS, best_HSS_1, best_HSS_2, best_CSI, best_F1, best_GS, best_ApSS, best_WACC],
                                ignore_index=True)
        # best_record.to_csv(f'C:\\Users\\YKW\\PycharmProjects\\Reinforcement\\Models\\{Model_name}\\{Model_name}_Optimization_record.csv', index=False)
        best_record.to_csv(f'C:\\Users\\YKW\\PycharmProjects\\Reinforcement\\Models\\{folder}\\{Model_name}\\{Model_name}_Optimization_record.csv',
            index=False)
        # best_record.to_csv(f'C:\\Users\\YKW\\PycharmProjects\\FlareOccurrencePrediction\\Models\\RL_comparison\\Models_bySolarCycle\\{Model_name}\\{Model_name}_Optimization_record.csv', index=False)
